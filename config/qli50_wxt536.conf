# qli50-wxt536 config file

# default log level, if not specified in the command line. Should be 0..5, 0 = none,1 = terse, 5 = very verbose
log.level.default    	    	      = 5

# The serial port to communicate with the Vaisala Wxt536 weather station with.
wxt536.serial_device.name 	      = /dev/ttyS0
# The protocol to use with the Wxt536 weather station.
# The current Wxt536 library software will only work if the protocol is set to ASCII Polled 'P'.
wxt536.protocol      	     	      = P
# The maximum age of a datum read from the Wxt536 before it is deemed stale data, in decimal seconds.
wxt536.max_datum_age	     	       = 10.0
# Configure how often the Wxt536 updates it's analogue input values, in decimal seconds. 
# It defaults to updating these every minute,
# as we have the DRD11A attached to one of these inputs we want to react to wetness quicker than that.
# The update interval must be longer than the averaging time.
wxt536.analogue_input.update_interval  = 6.0
# Configure the length of time the Wxt536 averages the solar radiation and ultrasonic level 
# (used by us for the DRD11A analogue input) data values, in decimal seconds. 
# The default of 3s is reasonable for our usage, but if we want to decrease the update interval we may want to decrease 
# this value as well, as the averaging time must be less than the update interval.
wxt536.analogue_input.averaging_time   = 3.0
# The gain used by the Wxt536 when returning the pyranometer voltage.
# The factory setting for this is 100000
# This can be read from the Wxt536 using "0IB,G" and set using "0IB,G=100000.0"
# According to the printed manual P146 8.1.6.7 Solar Radiation Sensor settings,
# for CMP3 with sensitivity 30.95 uV/W/m^2, set to 1/0.00003095,
# so reading in volts is the solarity in W/m^2
wxt536.pyranometer.gain	    	       = 32310
# The CMP3 pyranometer sensitivity, in uV/W/m^2. This should be read off the label attached to the device.
# Our CMP3 Serial No.: 210834, has a sensitivity of 30.95 uV/W/m^2.
cmp3.pyranometer.sensitivity	       = 30.95
# Which sensor to use when determining the digital surface wet value
# If wxt536 is selected for the digital surface wetness, we return the  Wxt536's piezo sensor rain intensity (in mm/h)
digital.surface.wet.sensor	       = wxt536
#digital.surface.wet.sensor	       = drd11a
# The DRD11A analogue sensor reports 1v wet, 3v dry. What is the threshold, below which, we report 'wet'?
digital.surface.wet.drd11a.threshold   = 2.8
# Which sensor to use when determining the analogue surface wet value
#analogue.surface.wet.sensor	       = wxt536
analogue.surface.wet.sensor	       = drd11a
# We can convert the DRD11A analogue value directly to an analogue percentage wet.
# The DRD11A analogue voltage goes from 1v fully wet to 3v fully dry.
# Therefore the Analogue surface wet value (0..100) = 100-((Ultrasonic_Level_Voltage-(drd11a.wetpoint))*drd11a.scale)
analogue.surface.wet.drd11a.wetpoint	= 1.0
analogue.surface.wet.drd11a.scale	= 50.0
# We use the Wxt536 rain intensity (in mm/h) in wxt536 mode, and scale it (with range checking)
# A scale value of 100.0 means a rain intensity of 1mm/h converts to an analogue wetness of 100%
analogue.surface.wet.wxt536.scale      = 100.0
# Should we fake the qli50 internal current data, or return QLI50_ERROR_NO_MEASUREMENT?
qli50.internal_current.fake	   	= true
# Should we fake the qli50 internal temperature data, or return QLI50_ERROR_NO_MEASUREMENT?
qli50.internal_temperature.fake	   	= true
# Should we fake the qli50 reference temperature data, or return QLI50_ERROR_NO_MEASUREMENT?
qli50.reference_temperature.fake	= true
# The serial port to use as the Qli50 server emulation port
qli50.serial_device.name    	       = /dev/ttyS1
